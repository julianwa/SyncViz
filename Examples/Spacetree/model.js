// Generated by CoffeeScript 1.9.0
(function() {
  var Command, root, zeroPad,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  Command = (function() {
    function Command(_at_action) {
      this.action = _at_action;
    }

    return Command;

  })();

  root.ModelNode = (function() {
    function ModelNode(_at_id, _at_label) {
      this.id = _at_id;
      this.label = _at_label;
      this.children = [];
    }

    ModelNode.prototype.reset = function() {
      return this.children.length = 0;
    };

    ModelNode.prototype._exportSpacetreeJSON = function(modelId, childIndex) {
      var child, childrenJSON, index;
      childrenJSON = (function() {
        var _i, _len, _ref, _results;
        _ref = this.children;
        _results = [];
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          child = _ref[index];
          _results.push(child._exportSpacetreeJSON(modelId, index));
        }
        return _results;
      }).call(this);
      return {
        id: modelId + " " + this.id,
        name: (zeroPad(childIndex, 3)) + " " + this.label,
        children: childrenJSON
      };
    };

    return ModelNode;

  })();

  root.Model = (function(_super) {
    __extends(Model, _super);

    function Model(id, label) {
      Model.__super__.constructor.call(this, id, label);
      this._executedCommands = [];
    }

    Model.prototype.executedCommands = function() {
      return this._executedCommands;
    };

    Model.prototype.reset = function() {
      Model.__super__.reset.apply(this, arguments);
      return this._executedCommands.length = 0;
    };

    Model.prototype.exportSpacetreeJSON = function() {
      var child, childrenJSON, index;
      childrenJSON = (function() {
        var _i, _len, _ref, _results;
        _ref = this.children;
        _results = [];
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          child = _ref[index];
          _results.push(child._exportSpacetreeJSON(this.id, index));
        }
        return _results;
      }).call(this);
      return {
        id: this.id,
        name: "000 " + this.label,
        children: childrenJSON
      };
    };

    Model.prototype.fastForwardMerge = function(model, maxRevision) {
      this.executeCommands(model.newerCommandsThan(this.currentRevision()), maxRevision);
      maxRevision = maxRevision != null ? maxRevision : model.currentRevision();
      if (maxRevision > model.currentRevision()) {
        maxRevision = model.currentRevision();
      }
      if (this.currentRevision() !== maxRevision) {
        throw new Error("Current revision values should match");
      }
    };

    Model.prototype.executeCommand = function(command) {
      this.executedCommands().push(command);
      return command.action(this);
    };

    Model.prototype.executeCommands = function(commands, maxRevision) {
      var command, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = commands.length; _i < _len; _i++) {
        command = commands[_i];
        if ((maxRevision == null) || this.currentRevision() < maxRevision) {
          _results.push(this.executeCommand(command));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Model.prototype.currentRevision = function() {
      return this._executedCommands.length;
    };

    Model.prototype.newerCommandsThan = function(baseRevision) {
      if (baseRevision < 0 || baseRevision > this._executedCommands.length) {
        throw new Error("newerCommandsThan: baseRevision out of range: baseRevision: " + baseRevision + " numCommands: " + this._executedCommands.length);
      }
      return this._executedCommands.slice(baseRevision, this._executedCommands.length);
    };

    return Model;

  })(ModelNode);

  root.PaperModel = (function(_super) {
    __extends(PaperModel, _super);

    function PaperModel(id) {
      PaperModel.__super__.constructor.call(this, id, 'USER');
    }

    PaperModel.prototype.journalWithId = function(journalId) {
      var journal;
      journal = this.children.filter(function(journal) {
        return journal.id === journalId;
      });
      if (journal.length > 0) {
        return journal[0];
      } else {
        return null;
      }
    };

    PaperModel.prototype.addJournalWithId = function(id) {
      return this.children.push(new ModelNode(id, "JRNL:" + id));
    };

    PaperModel.prototype.removeJournalWithId = function(journalId) {
      return this.children = this.children.filter(function(journal) {
        return journal.id !== journalId;
      });
    };

    PaperModel.prototype.moveJournal = function(fromIndex, toIndex) {
      return this.children.move(fromIndex, toIndex);
    };

    PaperModel.prototype.moveJournalWithId = function(journalId, toIndex) {
      var index, journal;
      index = ((function() {
        var _i, _len, _ref, _results;
        _ref = this.children;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          journal = _ref[_i];
          _results.push(journal.id);
        }
        return _results;
      }).call(this)).indexOf(journalId);
      if (index !== -1) {
        return this.moveJournal(index, toIndex);
      }
    };

    PaperModel.prototype.addPageWithId = function(journalId, pageId) {
      var matchingJournals;
      matchingJournals = this.children.filter(function(journal) {
        return journal.id === journalId;
      });
      if (matchingJournals.length === 0) {
        return;
      }
      if (matchingJournals.length > 1) {
        throw new Error("matched more than one journals");
      }
      return matchingJournals[0].children.push(new ModelNode(pageId, "PAGE:" + pageId));
    };

    PaperModel.prototype.removePageWithId = function(pageId) {
      var journal, _i, _len, _ref, _results;
      _ref = this.children;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        journal = _ref[_i];
        _results.push(journal.children = journal.children.filter(function(page) {
          return page.id !== pageId;
        }));
      }
      return _results;
    };

    PaperModel.prototype.movePage = function(journalId, fromIndex, toIndex) {
      var journal;
      journal = this.journalWithId(journalId);
      return journal.children.move(fromIndex, toIndex);
    };

    PaperModel.prototype.movePageWithId = function(journalId, pageId, toIndex) {
      var index, journal, page;
      journal = this.journalWithId(journalId);
      index = ((function() {
        var _i, _len, _ref, _results;
        _ref = this.children;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          page = _ref[_i];
          _results.push(page.id);
        }
        return _results;
      }).call(this)).indexOf(pageId);
      if (index !== -1) {
        return this.movePage(journalId, index, toIndex);
      }
    };

    return PaperModel;

  })(Model);

  root.AddJournalCommand = (function(_super) {
    __extends(AddJournalCommand, _super);

    function AddJournalCommand(journalId) {
      this.action = function(model) {
        return model.addJournalWithId(journalId);
      };
    }

    return AddJournalCommand;

  })(Command);

  root.MoveJournalCommand = (function(_super) {
    __extends(MoveJournalCommand, _super);

    function MoveJournalCommand(fromIndex, toIndex) {
      this.action = function(model) {
        return model.moveJournal(fromIndex, toIndex);
      };
    }

    return MoveJournalCommand;

  })(Command);

  root.MoveJournalWithIdCommand = (function(_super) {
    __extends(MoveJournalWithIdCommand, _super);

    function MoveJournalWithIdCommand(journalId, toIndex) {
      this.action = function(model) {
        return model.moveJournalWithId(journalId, toIndex);
      };
    }

    return MoveJournalWithIdCommand;

  })(Command);

  root.RemoveJournalWithIdCommand = (function(_super) {
    __extends(RemoveJournalWithIdCommand, _super);

    function RemoveJournalWithIdCommand(journalId) {
      this.action = function(model) {
        return model.removeJournalWithId(journalId);
      };
    }

    return RemoveJournalWithIdCommand;

  })(Command);

  root.AddPageCommand = (function(_super) {
    __extends(AddPageCommand, _super);

    function AddPageCommand(journalId, pageId) {
      this.action = function(model) {
        return model.addPageWithId(journalId, pageId);
      };
    }

    return AddPageCommand;

  })(Command);

  root.RemovePageWithIdCommand = (function(_super) {
    __extends(RemovePageWithIdCommand, _super);

    function RemovePageWithIdCommand(pageId) {
      this.action = function(model) {
        return model.removePageWithId(pageId);
      };
    }

    return RemovePageWithIdCommand;

  })(Command);

  root.MovePageCommand = (function(_super) {
    __extends(MovePageCommand, _super);

    function MovePageCommand(journalId, fromIndex, toIndex) {
      this.action = function(model) {
        return model.movePage(journalId, fromIndex, toIndex);
      };
    }

    return MovePageCommand;

  })(Command);

  root.MovePageWithIdCommand = (function(_super) {
    __extends(MovePageWithIdCommand, _super);

    function MovePageWithIdCommand(journalId, pageId, toIndex) {
      this.action = function(model) {
        return model.movePageWithId(journalId, pageId, toIndex);
      };
    }

    return MovePageWithIdCommand;

  })(Command);

  root.PaperModelClient = (function() {
    function PaperModelClient(_at_id) {
      this.id = _at_id;
      this.serverModel = new PaperModel("clientS_" + this.id);
      this.localModel = new PaperModel("clientL_" + this.id);
      this.localModelBaseRevision = 0;
    }

    PaperModelClient.prototype.localModelHasModifications = function() {
      return this.localModel.currentRevision() !== this.localModelBaseRevision;
    };

    PaperModelClient.prototype.localModelNeedsRebase = function() {
      if (this.serverModel.currentRevision() === this.localModelBaseRevision) {
        return false;
      }
      return this.localModelHasModifications();
    };

    PaperModelClient.prototype.push = function(server) {
      var baseRevision, commands;
      console.log("PUSH CLIENT: " + this.id);
      if (this.localModelNeedsRebase()) {
        console.log("   Local model needs rebase. Please do a pull. Aborting.");
        return;
      }
      baseRevision = this.serverModel.currentRevision();
      commands = this.localModel.newerCommandsThan(this.serverModel.currentRevision());
      if (commands.length > 0) {
        console.log("    attempting " + baseRevision + " -> " + (this.localModel.currentRevision()));
        if (server.pushCommands(baseRevision, commands)) {
          console.log("   ACCEPTED");
          this.serverModel.fastForwardMerge(this.localModel);
          return this.localModelBaseRevision = this.localModel.currentRevision();
        } else {
          return console.log("   REJECTED");
        }
      } else {
        return console.log("    No commands to push.");
      }
    };

    PaperModelClient.prototype.fetch = function(server, logPrefix) {
      var baseRevision, commands;
      logPrefix = logPrefix != null ? logPrefix : "";
      console.log(logPrefix + ("FETCH CLIENT: " + this.id));
      commands = server.newerCommandsThan(this.serverModel.currentRevision());
      if (commands.length > 0) {
        baseRevision = this.serverModel.currentRevision();
        this.serverModel.executeCommands(commands);
        return console.log(logPrefix + ("    server: " + baseRevision + " -> " + (this.serverModel.currentRevision())));
      } else {
        return console.log(logPrefix + "    No new commands");
      }
    };

    PaperModelClient.prototype.pull = function(server) {
      console.log("PULL CLIENT: " + this.id);
      this.fetch(server, "    ");
      if (this.localModelNeedsRebase()) {
        this.rebaseLocalModel();
        console.log("    local rebase: " + this.localModelBaseRevision + " -> " + (this.localModel.currentRevision()));
        return this.localModelBaseRevision = this.serverModel.currentRevision();
      } else {
        if (this.localModelBaseRevision === this.serverModel.currentRevision()) {
          console.log("    Nothing to do");
          return;
        }
        this.localModel.fastForwardMerge(this.serverModel);
        if (this.localModelBaseRevision === this.localModel.currentRevision()) {
          return console.log("    Nothing to do");
        } else {
          console.log("    local fast-forward: " + this.localModelBaseRevision + " -> " + (this.localModel.currentRevision()));
          return this.localModelBaseRevision = this.localModel.currentRevision();
        }
      }
    };

    PaperModelClient.prototype.rebaseLocalModel = function() {
      var baseModel, rebasedModel;
      baseModel = new PaperModel("clientB_" + this.id);
      baseModel.fastForwardMerge(this.serverModel, this.localModelBaseRevision);
      rebasedModel = new PaperModel("clientR_" + this.id);
      rebasedModel.fastForwardMerge(this.serverModel);
      this.mergeJournals(baseModel, rebasedModel, this.localModel, this.serverModel);
      this.localModel.reset();
      return this.localModel.fastForwardMerge(rebasedModel);
    };

    PaperModelClient.prototype.mergeJournals = function(baseModel, rebasedModel, localModel, serverModel) {
      var baseJournals, index, journal, journalId, journalsToAdd, journalsToRemove, localJournals, mergedJournals, serverJournals, _i, _j, _k, _len, _len1, _len2, _results;
      baseJournals = (function() {
        var _i, _len, _ref, _results;
        _ref = baseModel.children;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          journal = _ref[_i];
          _results.push(journal.id);
        }
        return _results;
      })();
      localJournals = (function() {
        var _i, _len, _ref, _results;
        _ref = localModel.children;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          journal = _ref[_i];
          _results.push(journal.id);
        }
        return _results;
      })();
      serverJournals = (function() {
        var _i, _len, _ref, _results;
        _ref = serverModel.children;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          journal = _ref[_i];
          _results.push(journal.id);
        }
        return _results;
      })();
      mergedJournals = this.mergeOrderedSet(baseJournals, localJournals, serverJournals);
      console.log("    mergedJournals: " + mergedJournals);
      journalsToRemove = serverJournals.filter(function(journalId) {
        return mergedJournals.indexOf(journalId) === -1;
      });
      console.log("    journalsToRemove: " + journalsToRemove);
      for (_i = 0, _len = journalsToRemove.length; _i < _len; _i++) {
        journalId = journalsToRemove[_i];
        rebasedModel.executeCommand(new RemoveJournalWithIdCommand(journalId));
      }
      journalsToAdd = mergedJournals.filter(function(journalId) {
        return serverJournals.indexOf(journalId) === -1;
      });
      console.log("    journalsToAdd: " + journalsToAdd);
      for (_j = 0, _len1 = journalsToAdd.length; _j < _len1; _j++) {
        journalId = journalsToAdd[_j];
        rebasedModel.executeCommand(new AddJournalCommand(journalId));
      }
      _results = [];
      for (index = _k = 0, _len2 = mergedJournals.length; _k < _len2; index = ++_k) {
        journalId = mergedJournals[index];
        rebasedModel.executeCommand(new MoveJournalWithIdCommand(journalId, index));
        _results.push(this.mergePages(baseModel, rebasedModel, localModel, serverModel, journalId));
      }
      return _results;
    };

    PaperModelClient.prototype.mergePages = function(baseModel, rebasedModel, localModel, serverModel, journalId) {
      var baseJournal, basePages, index, localJournal, localPages, mergedPages, page, pageId, pagesToAdd, pagesToRemove, serverJournal, serverPages, _i, _j, _k, _len, _len1, _len2, _results;
      baseJournal = baseModel.journalWithId(journalId);
      localJournal = localModel.journalWithId(journalId);
      serverJournal = serverModel.journalWithId(journalId);
      basePages = (function() {
        var _i, _len, _ref, _results;
        _ref = (baseJournal ? baseJournal.children : []);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          page = _ref[_i];
          _results.push(page.id);
        }
        return _results;
      })();
      localPages = (function() {
        var _i, _len, _ref, _results;
        _ref = (localJournal ? localJournal.children : []);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          page = _ref[_i];
          _results.push(page.id);
        }
        return _results;
      })();
      serverPages = (function() {
        var _i, _len, _ref, _results;
        _ref = (serverJournal ? serverJournal.children : []);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          page = _ref[_i];
          _results.push(page.id);
        }
        return _results;
      })();
      mergedPages = this.mergeOrderedSet(basePages, localPages, serverPages);
      console.log("    mergedPages: " + mergedPages);
      pagesToRemove = serverPages.filter(function(pageId) {
        return mergedPages.indexOf(pageId) === -1;
      });
      console.log("    pagesToRemove: " + pagesToRemove);
      for (_i = 0, _len = pagesToRemove.length; _i < _len; _i++) {
        pageId = pagesToRemove[_i];
        rebasedModel.executeCommand(new RemovePageWithIdCommand(pageId));
      }
      pagesToAdd = mergedPages.filter(function(pageId) {
        return serverPages.indexOf(pageId) === -1;
      });
      console.log("    pagesToAdd: " + pagesToAdd);
      for (_j = 0, _len1 = pagesToAdd.length; _j < _len1; _j++) {
        pageId = pagesToAdd[_j];
        rebasedModel.executeCommand(new AddPageCommand(journalId, pageId));
      }
      _results = [];
      for (index = _k = 0, _len2 = mergedPages.length; _k < _len2; index = ++_k) {
        pageId = mergedPages[index];
        _results.push(rebasedModel.executeCommand(new MovePageWithIdCommand(journalId, pageId, index)));
      }
      return _results;
    };

    PaperModelClient.prototype.mergeOrderedSet = function(base, A, B) {
      var diffA, diffB, mergedDiff, resolvedDiff;
      diffA = diffmergepatch.orderedSet.diff(base, A);
      diffB = diffmergepatch.orderedSet.diff(base, B);
      mergedDiff = diffmergepatch.orderedSet.merge([diffA, diffB]);
      resolvedDiff = diffmergepatch.orderedSet.resolve(mergedDiff, 0);
      return diffmergepatch.orderedSet.patch(base, resolvedDiff);
    };

    return PaperModelClient;

  })();

  root.PaperModelServer = (function() {
    function PaperModelServer() {
      this.model = new PaperModel("server");
    }

    PaperModelServer.prototype.pushCommands = function(baseRevision, commands) {
      if (baseRevision === this.model.currentRevision()) {
        this.model.executeCommands(commands);
        return true;
      }
      return false;
    };

    PaperModelServer.prototype.newerCommandsThan = function(baseRevision) {
      return this.model.newerCommandsThan(baseRevision);
    };

    return PaperModelServer;

  })();

  zeroPad = function(num, places) {
    var zero;
    zero = places - num.toString().length + 1;
    return Array(+(zero > 0 && zero)).join("0") + num;
  };

  root.createGuid = function() {
    var s4;
    s4 = function() {
      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    };
    return s4();
  };

  Array.prototype.move = function(fromIndex, toIndex) {
    if (fromIndex < 0 || fromIndex >= this.length) {
      throw new Error("Array.move: fromIndex out of bounds");
    }
    if (toIndex < 0 || toIndex >= this.length) {
      throw new Error("Array.move: toIndex out of bounds");
    }
    this.splice(toIndex, 0, this.splice(fromIndex, 1)[0]);
    return this;
  };

}).call(this);
