// Generated by CoffeeScript 1.9.0
(function() {
  var Command, root, zeroPad,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  Command = (function() {
    function Command(_at_action) {
      this.action = _at_action;
    }

    return Command;

  })();

  root.ModelNode = (function() {
    function ModelNode(_at_id, _at_label) {
      this.id = _at_id;
      this.label = _at_label;
      this.children = [];
    }

    ModelNode.prototype.reset = function() {
      return this.children.length = 0;
    };

    ModelNode.prototype._exportSpacetreeJSON = function(modelId, childIndex) {
      var child, childrenJSON, index;
      childrenJSON = (function() {
        var _i, _len, _ref, _results;
        _ref = this.children;
        _results = [];
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          child = _ref[index];
          _results.push(child._exportSpacetreeJSON(modelId, index));
        }
        return _results;
      }).call(this);
      return {
        id: modelId + " " + this.id,
        name: (zeroPad(childIndex, 3)) + " " + this.label,
        children: childrenJSON
      };
    };

    return ModelNode;

  })();

  root.Model = (function(_super) {
    __extends(Model, _super);

    function Model(id, label) {
      Model.__super__.constructor.call(this, id, label);
      this._executedCommands = [];
    }

    Model.prototype.executedCommands = function() {
      return this._executedCommands;
    };

    Model.prototype.reset = function() {
      Model.__super__.reset.apply(this, arguments);
      return this._executedCommands.length = 0;
    };

    Model.prototype.exportSpacetreeJSON = function() {
      var child, childrenJSON, index;
      childrenJSON = (function() {
        var _i, _len, _ref, _results;
        _ref = this.children;
        _results = [];
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          child = _ref[index];
          _results.push(child._exportSpacetreeJSON(this.id, index));
        }
        return _results;
      }).call(this);
      return {
        id: this.id,
        name: "000 " + this.label,
        children: childrenJSON
      };
    };

    Model.prototype.fastForwardMerge = function(model) {
      this.executeCommands(model.newerCommandsThan(this.currentRevision()));
      if (this.currentRevision() !== model.currentRevision()) {
        throw new Error("Current revision values should match");
      }
    };

    Model.prototype.executeCommand = function(command) {
      this.executedCommands().push(command);
      return command.action(this);
    };

    Model.prototype.executeCommands = function(commands) {
      var command, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = commands.length; _i < _len; _i++) {
        command = commands[_i];
        _results.push(this.executeCommand(command));
      }
      return _results;
    };

    Model.prototype.currentRevision = function() {
      return this._executedCommands.length;
    };

    Model.prototype.newerCommandsThan = function(baseRevision) {
      if (baseRevision < 0 || baseRevision > this._executedCommands.length) {
        throw new Error("newerCommandsThan: baseRevision out of range: baseRevision: " + baseRevision + " numCommands: " + this._executedCommands.length);
      }
      return this._executedCommands.slice(baseRevision, this._executedCommands.length);
    };

    return Model;

  })(ModelNode);

  root.PaperModel = (function(_super) {
    __extends(PaperModel, _super);

    function PaperModel(id) {
      PaperModel.__super__.constructor.call(this, id, 'USER');
    }

    PaperModel.prototype.addJournalWithId = function(id) {
      return this.children.push(new ModelNode(id, "JRNL:" + id));
    };

    PaperModel.prototype.removeJournalWithId = function(journalId) {
      return this.children = this.children.filter(function(journal) {
        return journal.id !== journalId;
      });
    };

    PaperModel.prototype.addPageWithId = function(journalId, pageId) {
      var matchingJournals;
      matchingJournals = this.children.filter(function(journal) {
        return journal.id === journalId;
      });
      if (matchingJournals.length === 0) {
        return;
      }
      if (matchingJournals.length > 1) {
        throw new Error("matched more than one journals");
      }
      return matchingJournals[0].children.push(new ModelNode(pageId, "PAGE:" + pageId));
    };

    PaperModel.prototype.removePageWithId = function(pageId) {
      var journal, _i, _len, _ref, _results;
      _ref = this.children;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        journal = _ref[_i];
        _results.push(journal.children = journal.children.filter(function(page) {
          return page.id !== pageId;
        }));
      }
      return _results;
    };

    return PaperModel;

  })(Model);

  root.AddJournalCommand = (function(_super) {
    __extends(AddJournalCommand, _super);

    function AddJournalCommand(journalId) {
      this.action = function(model) {
        return model.addJournalWithId(journalId);
      };
    }

    return AddJournalCommand;

  })(Command);

  root.RemoveJournalWithIdCommand = (function(_super) {
    __extends(RemoveJournalWithIdCommand, _super);

    function RemoveJournalWithIdCommand(journalId) {
      this.action = function(model) {
        return model.removeJournalWithId(journalId);
      };
    }

    return RemoveJournalWithIdCommand;

  })(Command);

  root.AddPageCommand = (function(_super) {
    __extends(AddPageCommand, _super);

    function AddPageCommand(journalId, pageId) {
      this.action = function(model) {
        return model.addPageWithId(journalId, pageId);
      };
    }

    return AddPageCommand;

  })(Command);

  root.RemovePageWithIdCommand = (function(_super) {
    __extends(RemovePageWithIdCommand, _super);

    function RemovePageWithIdCommand(pageId) {
      this.action = function(model) {
        return model.removePageWithId(pageId);
      };
    }

    return RemovePageWithIdCommand;

  })(Command);

  root.PaperModelClient = (function() {
    function PaperModelClient(_at_id) {
      this.id = _at_id;
      this.serverModel = new PaperModel("clientS_" + this.id);
      this.localModel = new PaperModel("clientL_" + this.id);
      this.localModelBaseRevision = 0;
    }

    PaperModelClient.prototype.localModelHasModifications = function() {
      return this.localModel.currentRevision() !== this.localModelBaseRevision;
    };

    PaperModelClient.prototype.localModelNeedsRebase = function() {
      if (this.serverModel.currentRevision() === this.localModelBaseRevision) {
        return false;
      }
      return this.localModelHasModifications();
    };

    PaperModelClient.prototype.push = function(server) {
      var baseRevision, commands;
      console.log("PUSH CLIENT: " + this.id);
      if (this.localModelNeedsRebase()) {
        console.log("   Local model needs rebase. Please do a pull. Aborting.");
        return;
      }
      baseRevision = this.serverModel.currentRevision();
      commands = this.localModel.newerCommandsThan(this.serverModel.currentRevision());
      if (commands.length > 0) {
        console.log("    attempting " + baseRevision + " -> " + (this.localModel.currentRevision()));
        if (server.pushCommands(baseRevision, commands)) {
          console.log("   ACCEPTED");
          this.serverModel.fastForwardMerge(this.localModel);
          return this.localModelBaseRevision = this.localModel.currentRevision();
        } else {
          return console.log("   REJECTED");
        }
      } else {
        return console.log("    No commands to push.");
      }
    };

    PaperModelClient.prototype.fetch = function(server, logPrefix) {
      var baseRevision, commands;
      logPrefix = logPrefix != null ? logPrefix : "";
      console.log(logPrefix + ("FETCH CLIENT: " + this.id));
      commands = server.newerCommandsThan(this.serverModel.currentRevision());
      if (commands.length > 0) {
        baseRevision = this.serverModel.currentRevision();
        this.serverModel.executeCommands(commands);
        return console.log(logPrefix + ("    server: " + baseRevision + " -> " + (this.serverModel.currentRevision())));
      } else {
        return console.log(logPrefix + "    No new commands");
      }
    };

    PaperModelClient.prototype.pull = function(server) {
      console.log("PULL CLIENT: " + this.id);
      this.fetch(server, "    ");
      if (this.localModelNeedsRebase()) {
        this.rebaseLocalModel();
        console.log("    local rebase: " + this.localModelBaseRevision + " -> " + (this.localModel.currentRevision()));
        return this.localModelBaseRevision = this.serverModel.currentRevision();
      } else {
        if (this.localModelBaseRevision === this.serverModel.currentRevision()) {
          console.log("    Nothing to do");
          return;
        }
        this.localModel.fastForwardMerge(this.serverModel);
        if (this.localModelBaseRevision === this.localModel.currentRevision()) {
          return console.log("    Nothing to do");
        } else {
          console.log("    local fast-forward: " + this.localModelBaseRevision + " -> " + (this.localModel.currentRevision()));
          return this.localModelBaseRevision = this.localModel.currentRevision();
        }
      }
    };

    PaperModelClient.prototype.rebaseLocalModel = function() {
      var commandsToRebase, rebasedModel;
      rebasedModel = new PaperModel("clientR_" + this.id);
      rebasedModel.fastForwardMerge(this.serverModel);
      commandsToRebase = this.localModel.newerCommandsThan(this.localModelBaseRevision);
      console.log("    Rebasing " + commandsToRebase.length + " local command(s)");
      rebasedModel.executeCommands(commandsToRebase);
      this.localModel.reset();
      return this.localModel.fastForwardMerge(rebasedModel);
    };

    return PaperModelClient;

  })();

  root.PaperModelServer = (function() {
    function PaperModelServer() {
      this.model = new PaperModel("server");
    }

    PaperModelServer.prototype.pushCommands = function(baseRevision, commands) {
      if (baseRevision === this.model.currentRevision()) {
        this.model.executeCommands(commands);
        return true;
      }
      return false;
    };

    PaperModelServer.prototype.newerCommandsThan = function(baseRevision) {
      return this.model.newerCommandsThan(baseRevision);
    };

    return PaperModelServer;

  })();

  zeroPad = function(num, places) {
    var zero;
    zero = places - num.toString().length + 1;
    return Array(+(zero > 0 && zero)).join("0") + num;
  };

  root.createGuid = function() {
    var s4;
    s4 = function() {
      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    };
    return s4();
  };

}).call(this);
